// <auto-generated />
using System;
using System.Collections.Generic;
using DysonNetwork.Insight;
using DysonNetwork.Shared.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DysonNetwork.Insight.Migrations
{
    [DbContext(typeof(AppDatabase))]
    [Migration("20251026134218_AddBilling")]
    partial class AddBilling
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DysonNetwork.Shared.Models.SnThinkingSequence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long>("PaidToken")
                        .HasColumnType("bigint")
                        .HasColumnName("paid_token");

                    b.Property<string>("Topic")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)")
                        .HasColumnName("topic");

                    b.Property<long>("TotalToken")
                        .HasColumnType("bigint")
                        .HasColumnName("total_token");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_thinking_sequences");

                    b.ToTable("thinking_sequences", (string)null);
                });

            modelBuilder.Entity("DysonNetwork.Shared.Models.SnThinkingThought", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<List<SnThinkingChunk>>("Chunks")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("chunks");

                    b.Property<string>("Content")
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<Instant>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<List<SnCloudFileReferenceObject>>("Files")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("files");

                    b.Property<string>("ModelName")
                        .HasMaxLength(4096)
                        .HasColumnType("character varying(4096)")
                        .HasColumnName("model_name");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<Guid>("SequenceId")
                        .HasColumnType("uuid")
                        .HasColumnName("sequence_id");

                    b.Property<long>("TokenCount")
                        .HasColumnType("bigint")
                        .HasColumnName("token_count");

                    b.Property<Instant>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_thinking_thoughts");

                    b.HasIndex("SequenceId")
                        .HasDatabaseName("ix_thinking_thoughts_sequence_id");

                    b.ToTable("thinking_thoughts", (string)null);
                });

            modelBuilder.Entity("DysonNetwork.Shared.Models.SnThinkingThought", b =>
                {
                    b.HasOne("DysonNetwork.Shared.Models.SnThinkingSequence", "Sequence")
                        .WithMany()
                        .HasForeignKey("SequenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_thinking_thoughts_thinking_sequences_sequence_id");

                    b.Navigation("Sequence");
                });
#pragma warning restore 612, 618
        }
    }
}
